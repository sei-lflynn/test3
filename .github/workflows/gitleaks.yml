# Gitleaks secret scanning (native SARIF) with hardening and best practices 
# =============================================================================
# What this workflow does (in order):
#   1) Checks out your repository with read-only permissions and no persisted credentials.
#   2) Runs Gitleaks (pinned to a commit SHA) to scan for hard-coded secrets.
#   3) Writes a SARIF report to the workspace root (relative path).
#   4) Uploads the SARIF to GitHub Code Scanning IF the file exists.
#
# Key security & reliability patterns:
#   • Default-deny permissions at the workflow level (read-only by default).
#   • Least privilege in the job (add security-events: write only for SARIF upload).
#   • SHA-pinned third-party actions (reproducible, tamper-resistant).
#   • Concurrency to cancel superseded runs.
#   • Timeouts to cap spend and fail fast.
#   • Hardened network egress (audit now; block + allowlist later).
#   • Scoped checkout credentials (we never persist a token; we don’t push).
#   • Conditional upload: the SARIF uploader runs only if the file is present.

name: gitleaks

on:
  pull_request:
  push:
  schedule:
    - cron: "0 4 * * *"   # daily at 04:00 UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  scan:

    name: Gitleaks scan → Code Scanning
    runs-on: ubuntu-24.04                 # Pin runner for reproducibility
    timeout-minutes: 20                   # Upper bound for this job

    # Least-privilege job scopes:
    # - contents: read         → required for checkout
    # - security-events: write → required to upload SARIF to Code Scanning
    # - actions: read          → required in private repos so upload-sarif can read run status

    permissions:
      contents: read
      security-events: write
      actions: read

    # Keep paths relative to the workspace; no /github/... anywhere.
    env:
      REPORT_PATH: gitleaks.sarif
      WORKSPACE_REPORT_PATH: gitleaks-workspace.sarif

    steps:
      # Harden egress. Start in audit mode to learn endpoints. Once stable, flip to:
      #   egress-policy: block
      # and allowlist only what you need (api.github.com, uploads.github.com, etc.).
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Checkout with no persisted creds (we don’t push in this job)
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0  # full history (useful if you later scan history)

      # Run Gitleaks.
      # Notes:
      #  - Gitleaks exits non-zero if leaks are found. We keep the job alive with
      #    `continue-on-error: true` so the SARIF upload can still run.
      #  - We write the report to a RELATIVE path at repo root (./gitleaks.sarif),
      #    which the container sees under /github/workspace/gitleaks.sarif.
      #  - If you maintain a baseline/allowlist, commit `.gitleaks.toml`
      #    and uncomment `config-path` below.
      - name: Run Gitleaks
        id: gitleaks
        continue-on-error: true
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        with:
          args: >-
            detect
            --source .
            --redact
            --no-banner
            --verbose
            --report-format sarif
            --report-path "${{ env.REPORT_PATH }}"
            --log-opts="--all --remotes --full-history"
          # config-path: .gitleaks.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # optional; used by some org features

      # Additional scan of the working tree (untracked/generated files).
      - name: Run Gitleaks (working tree)
        id: gitleaks_workspace
        continue-on-error: true
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        with:
          args: >-
            detect
            --no-git
            --source .
            --redact
            --no-banner
            --verbose
            --report-format sarif
            --report-path "${{ env.WORKSPACE_REPORT_PATH }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # optional; used by some org features

      # Upload SARIF to Code Scanning (Security tab).
      # IMPORTANT: This step runs ONLY if the SARIF file exists and is non-empty.
      #   • If Gitleaks produces no report file (some builds do this when there are zero findings),
      #     then NOTHING is uploaded. This is expected.
      #   • If Gitleaks produces an “empty” SARIF (file exists with zero results),
      #     it WILL be uploaded and Code Scanning will show no alerts for this run.
      - name: Upload SARIF to Code Scanning
        if: always() && hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ env.REPORT_PATH }}
          category: gitleaks

      # Upload the working-tree SARIF as a separate category.
      - name: Upload SARIF to Code Scanning (working tree)
        if: always() && hashFiles('gitleaks-workspace.sarif') != ''
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: ${{ env.WORKSPACE_REPORT_PATH }}
          category: gitleaks-workspace
